{{!< default}}
<link rel="stylesheet" type="text/css" href="{{asset " assets/css1/file.css"}}" />
<link rel="stylesheet" href="{{asset 'css/carousel-testimonials.css'}}" />
<link rel="stylesheet" type="text/css" href="{{asset "assets/css/sponsori.css"}}" />
<link rel="stylesheet" type="text/css" href="{{asset "assets/css/index.css"}}" />
<link rel="stylesheet" type="text/css" href="{{asset "assets/css/screen.css"}}" />

<link rel="stylesheet" type="text/css" href="{{asset "assets/css/carousel-premii.css"}}" />
<style>
    /* Slideshow container */
.slideshow-container {
  width: 70%;
  position: relative;
  margin: auto;
  background-color: #1e1e1e;
  height: 50%;
}

/* Hide the images by default */
.mySlides {
  display: none;
  background-color: #1e1e1e;
  width: 100%;
  text-align: center;
  height: 50%;
}

/* Next & previous buttons */
.prev, .next {
  cursor: pointer;
  position: absolute;
  top: 50%;
  width: auto;
  margin-top: -22px;
  padding: 16px;
  color: white;
  font-weight: bold;
  font-size: 18px;
  transition: 0.6s ease;
  border-radius: 0 3px 3px 0;
  user-select: none;
}

/* Position the "next button" to the right */
.next {
  right: 0;
  border-radius: 3px 0 0 3px;
}

/* On hover, add a black background color with a little bit see-through */
.prev:hover, .next:hover {
  background-color: rgba(0,0,0,0.8);
}

/* Caption text */
.text {
  color: #f2f2f2;
  font-size: 15px;
  padding: 8px 12px;
  position: absolute;
  bottom: 8px;
  width: 100%;
  text-align: center;
}

/* Number text (1/3 etc) */
.numbertext {
  color: #1e1e1e;
  font-size: 12px;
  padding: 8px 12px;
  position: absolute;
  top: 0;
}

/* The dots/bullets/indicators */
.dot {
  cursor: pointer;
  height: 15px;
  width: 15px;
  margin: 0 2px;
  background-color: #1e1e1e;
  border-radius: 50%;
  display: inline-block;
  transition: background-color 0.6s ease;
}

.active, .dot:hover {
  background-color: #717171;
}

/* Fading animation */
.fade {
  animation-name: fade;
  animation-duration: 1.5s;
}

@keyframes fade {
  from {opacity: .4}
  to {opacity: 1}
}
</style>


<main id="site-main" style="z-index: 200; background-color: #1e1e1e;" class="site-main outer" style="width: 100%; overflow:">
<img class="banner_ph" src="/assets/images/BACKGROUND SITE 1920x1080-01.jpg" alt="" />
    <div class="py-5" style="
                background-color: #1e1e1e;
                color: var(--bs-gray-100);
            ">

        <div class="py-5" style="
                background-color: #1e1e1e;
                border-top: 1px solid var(--bs-gray-500);
                border-bottom: 1px solid var(--bs-gray-500);
                width:70%;
                margin:0 auto;
            ">

            <p class="intro-text">Now in its 16th edition, PoliHack is the bi-annual hackathon that challenges university and high school students to push the limits of their creativity and technical skills by developing innovative solutions in one of four categories: Embedded, AppDev, Web, and Junior.</p>
            <p class="intro-text second-paragraph">Organized by the Student Organization of the Technical University of Cluj-Napoca, PoliHack aims to encourage participants to collaborate with esteemed mentors from both industry and academia, offering them an authentic experience similar to what they would encounter in big companies.</p>

            <div>
                <h2 class="main-heading">
                    <b>PoliHack. The.Future.Is.Now.</b>
                </h2>
            </div>
        </div>
    </div>
    <div class="counter-flex">
        <div class="counter-flex-text">
         <div id="counter" class="counter">2200</div>
        <p class="counter-text">participanți</p>
        </div>
         <div class="counter-flex-text">
         <div id="counter2" class="counter2">0</div>
        <p class="counter-text">mentori</p>
         </div>
          <div class="counter-flex-text">
         <div id="counter3" class="counter3">0</div>
        <p class="counter-text">ediții</p>
        </div>
    </div>
    
<br>
<br>
<br>
<div>
                <h2 class="main-heading" style="border-top: 1px solid var(--bs-gray-500);">
                    PREMII
                </h2>
            </div>

 <div class="slideshow-container" style="
                background-color: #1e1e1e; 
            ">
    <div class="mySlides">
        <h3 class="main-heading">
            Gala Tineretului din România 2024
            </h3>
        <p class="text-center">Premiul al II-lea la Categoria Antreprenoriat și Inovare</p>
    </div>
      <div class="mySlides">
        <h3 class="main-heading">
            Gala Tineretului Clujean 2023
            </h3>
        <p class="text-center">Premiul al II-lea la Categoria Antreprenoriat și Inovare</p>
    </div>
      <div class="mySlides">
        <h3 class="main-heading">
            Gala Tineretului Clujean 2021
            </h3>
        <p class="text-center">Premiul de popularitate</p>
    </div>
      <div class="mySlides">
        <h3 class="main-heading">
            Gala Tineretului Clujean 2019-2020
            </h3>
        <p class="text-center">Premiul al III-lea la Categoria Formare Profesională</p>
    </div>
      <div class="mySlides">
        <h3 class="main-heading">
            Gala Binelui 2024
            </h3>
        <p class="text-center">Premiul la Categoria Antreprenoriat</p>
    </div>

    <!-- Navigation buttons -->
    <a class="prev" onclick="plusSlides(-1)">❮</a>
    <a class="next" onclick="plusSlides(1)">❯</a>
</div>

<!-- Dots for slide indicators -->
<div style="text-align: center;">
    <span class="dot" onclick="currentSlide(1)"></span> 
    <span class="dot" onclick="currentSlide(2)"></span> 
    <span class="dot" onclick="currentSlide(3)"></span> 
    <span class="dot" onclick="currentSlide(4)"></span> 
    <span class="dot" onclick="currentSlide(5)"></span> 
</div>
</main>


{{!script pentru primul counter}}
<script>
document.addEventListener("DOMContentLoaded", function() {
    const counterElement = document.getElementById("counter");


    // Phase 1: From 2200 to 2490 in 5 seconds
    const startNumber1 = 2200;
    const targetNumber1 = 2500;
    const duration1 = 5000;           // 5 seconds
    const incrementTime1 = 20;        // Interval in ms for Phase 1
    const totalIncrements1 = duration1 / incrementTime1;
    const increment1 = (targetNumber1 - startNumber1) / totalIncrements1;

    let currentNumber = startNumber1;

    // Phase 1 Counter Function
    function updateCounterPhase1() {
        currentNumber += increment1;

        if (currentNumber >= targetNumber1) {
            counterElement.textContent = targetNumber1 + "+"; // End at 2500+
        } else {
            counterElement.textContent = Math.floor(currentNumber);
            setTimeout(updateCounterPhase1, incrementTime1);
        }
    }

    // Start the first phase
    updateCounterPhase1();
});
</script>

{{!script pentru al doilea counter}}
<script>
document.addEventListener("DOMContentLoaded", function() {
    const counterElement = document.getElementById("counter2");
    const startNumber = 0;      // Numărul de început
    const targetNumber = 200;     // Numărul final
    const duration = 5000;        // Durata în milisecunde (5 secunde)
    const intervalTime = 20;       // Timpul între incrementări (20 ms)
    
    let currentNumber = startNumber;
    const increment = (targetNumber - startNumber) / (duration / intervalTime);

    function updateCounter() {
        currentNumber += increment;
        
        if (currentNumber >= targetNumber) {
            counterElement.textContent = targetNumber + "+";
        } else {
            counterElement.textContent = Math.floor(currentNumber);  // Arătăm doar partea întreagă
            setTimeout(updateCounter, intervalTime);                 // Continuăm incrementarea la fiecare 20ms
        }
    }

    updateCounter();
});
</script>

{{!script pentru al treilea counter}}
<script>
document.addEventListener("DOMContentLoaded", function() {
    const counterElement = document.getElementById("counter3");
    const startNumber = 0;      // Numărul de început
    const targetNumber = 15;     // Numărul final
    const duration = 5000;        // Durata în milisecunde (5 secunde)
    const intervalTime = 20;       // Timpul între incrementări (20 ms)
    
    let currentNumber = startNumber;
    const increment = (targetNumber - startNumber) / (duration / intervalTime);

    function updateCounter() {
        currentNumber += increment;
        
        if (currentNumber >= targetNumber) {
            counterElement.textContent = targetNumber;
        } else {
            counterElement.textContent = Math.floor(currentNumber);  // Arătăm doar partea întreagă
            setTimeout(updateCounter, intervalTime);                 // Continuăm incrementarea la fiecare 20ms
        }
    }

    updateCounter();
});
</script>

{{! script pentru carousel }}
<script>
let slideIndex = 1;
showSlides(slideIndex);

// Next/previous controls
function plusSlides(n) {
  showSlides(slideIndex += n);
}

// Thumbnail image controls
function currentSlide(n) {
  showSlides(slideIndex = n);
}

function showSlides(n) {
  let i;
  let slides = document.getElementsByClassName("mySlides");
  let dots = document.getElementsByClassName("dot");
  if (n > slides.length) {slideIndex = 1}
  if (n < 1) {slideIndex = slides.length}
  for (i = 0; i < slides.length; i++) {
    slides[i].style.display = "none";
  }
  for (i = 0; i < dots.length; i++) {
    dots[i].className = dots[i].className.replace(" active", "");
  }
  slides[slideIndex-1].style.display = "block";
  dots[slideIndex-1].className += " active";
}
</script>

    <script>
// JavaScript for scroll detection (desktop only)
document.addEventListener('DOMContentLoaded', () => {
    const header = document.querySelector('.gh-head');

    const handleScroll = () => {
        // Only apply the scroll effect if the viewport width is above 900px
        if (window.innerWidth >= 900) {
            if (window.scrollY > 50) {
                header.classList.add('scrolled');
            } else {
                header.classList.remove('scrolled');
            }
        } else {
            // Remove the 'scrolled' class on mobile to ensure a consistent look
            header.classList.remove('scrolled');
        }
    };

    // Add the scroll event listener
    window.addEventListener('scroll', handleScroll);

    // Check on window resize as well
    window.addEventListener('resize', handleScroll);
});

document.querySelector('a[href^="#"]').addEventListener("click", function(event) {
    event.preventDefault();

    const targetId = this.getAttribute("href").substring(1);
    const targetElement = document.getElementById(targetId);

    window.scrollTo({
        top: targetElement.offsetTop,
        behavior: "smooth"
    });
});
    </script>

<script>
    let slideIndex = 0;
    const slides = document.querySelectorAll('.mySlides');

    function showSlide(index) {
        slides.forEach((slide, i) => {
            slide.classList.remove('active');
            if (i === index) {
                slide.classList.add('active');
            }
        });
    }

    function plusSlides(n) {
        slideIndex = (slideIndex + n + slides.length) % slides.length;
        showSlide(slideIndex);
    }

    function currentSlide(n) {
        slideIndex = n - 1;
        showSlide(slideIndex);
    }

    // Auto-show the first slide on load
    showSlide(slideIndex);
</script>



</main>

